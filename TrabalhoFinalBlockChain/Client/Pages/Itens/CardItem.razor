@using MetaMask.Blazor
@using Transferencias.Models
@using global::Itens.Enums
@using global::Players.Models
@inject HttpClient http

<link href="css/CardItem.css" rel="stylesheet" />

<link href="https://fonts.googleapis.com/css?family=Source+Code+Pro:400,500" rel="stylesheet">

<div class="card">
   <div class="card-avatar">
      <img class="card-avatar" src="@CaminhoImagem(transferencia.Item.Raridade, transferencia.Item.Tipo)">
   </div>
   <div class="card-details">
      <div class="value">@transferencia.Item.IdChain</div>
      <div class="label">@transferencia.Valor eth</div>
      
      <div class="card-about">
         <div class="item">
            <span class="value">@transferencia.Item.Ataque</span>
            <span class="label">Atk</span>
         </div>
         <div class="item">
            <span class="value">@transferencia.Item.Defesa</span>
            <span class="label">Def</span>
         </div>
         <div class="item">
            <span class="value">@transferencia.Item.Acerto</span>
            <span class="label">Acerto</span>
         </div>
         <div class="item">
            <span class="value">@transferencia.Item.Vida</span>
            <span class="label">Vida</span>
         </div>
      </div>
      <div class="skills">
         <span class="value">@transferencia.Item.Habilidade.Efeito</span>
      </div>
   </div>
   <button class="skills" onclick="@Comprar">
       <span class="value">Comprar</span>
   </button>
</div>

@code{
    [Parameter]
    public TransferenciaViewModel transferencia { get; set; }

    [Inject]    
    public MetaMaskService MetaMaskService { get; set; } = default!;

    [Inject]
    public Player? Player { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    private async void Comprar()
    {
        var options = new ModalOptions()
                {
                    HideHeader = true
                };

        if(string.IsNullOrEmpty(Player.IdCarteira))
        {
            var parametros = new ModalParameters();
            parametros.Add("mensagem", "Você precisa fazer o login no metamask para poder comprar.");

            Modal.Show<ModalMensagem>("", parametros, options);
        }
        else if(transferencia.Vendedor.IdCarteira == Player.IdCarteira)
        {
            var parametros = new ModalParameters();
            parametros.Add("mensagem", "Você nâo pode comprar seu próprio item.");

            Modal.Show<ModalMensagem>("", parametros, options);
        }
        else
        {
            var parametros = new ModalParameters();
            parametros.Add("mensagem", "Deseja mesmo comprar esse item? \n" + transferencia.Item.IdChain + "\n" + transferencia.Valor + " eth"); 

            var status = await Modal.Show<ModalConfirm>("", parametros, options).Result;

            if(!status.Cancelled)
            {
                transferencia.Comprador = Player;
                await http.PutAsJsonAsync("api/transferencia/Comprar", transferencia);
            }
        }
    }

    private string CaminhoImagem(int raridade, int tipo)
        {
            return "images/" + (Tipos)tipo + "/" + (Raridades)raridade + ".png";
        }
}
