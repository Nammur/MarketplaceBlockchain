@page "/CriarItem"
@using System.Text.Json
@using global::Itens.Models
@using global::Itens.Enums
@using global::Players.Models
@inject HttpClient http


<link href="css/CustomForm.css" rel="stylesheet" />
<link href="css/CustomButton.css" rel="stylesheet" />


@if (habilidades.Count == 0)
{
    <p><em>Carregando...</em></p>
}
else
{
    <EditForm Model="@item" OnValidSubmit="@Criar">
        <div style="display:flex;flex-direction:row;">
            <div style="display:flex;flex-direction:column;padding:15px" class="col-3">
                <label>Raridade</label>
                <InputSelect @bind-Value="item.Raridade" > 
                @foreach (var raridade in raridades)
                {
                    <option value="@GetValue(raridade)">@GetDisplayName(raridade)</option>
                }
                </InputSelect> 
            </div>
            <div style="display:flex;flex-direction:column; padding:15px" class="col-3">
                <label>Tipo de item</label>
                <InputSelect @bind-Value="item.Tipo" > 
                    @foreach (var tipo in tipos)
                    {
                        <option value="@GetValue(tipo)">@GetDisplayName(tipo)</option>
                    }
                </InputSelect> 
            </div>
            
            <div style="display:flex;flex-direction:column; padding:15px" class="col-6">
                <label>Habilidade</label>
                <div style="display:flex;flex-direction:row;">
                    <InputSelect @bind-Value="item.Habilidade.Id" > 
                    @foreach (var hab in habilidades)
                    {
                        <option value="@hab.Id">@hab.Efeito</option>
                    }
                </InputSelect> 
                     <div  style="display:flex; align-items:center; margin-left:15px" class="col-2">
                        <button type="button" class="bn54" style="height:fit-content; width:60px" onclick="@CriarHabilidade">
                            <i class="fa fa-plus"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div style="display:flex;flex-direction:row;">
            <div style="display:flex;flex-direction:column;padding:15px" class="col-3">
                <label>Ataque</label>
                <InputNumber @bind-Value="item.Ataque">Ataque</InputNumber>
            </div>
            <div style="display:flex;flex-direction:column;padding:15px" class="col-3">
                <label>Defesa</label>
                <InputNumber @bind-Value="item.Defesa">Ataque</InputNumber>
            </div>
            <div style="display:flex;flex-direction:column;padding:15px" class="col-3">
                <label>Acerto</label>
                <InputNumber @bind-Value="item.Acerto">Ataque</InputNumber>
            </div>
            <div style="display:flex;flex-direction:column;padding:15px" class="col-3">
                <label>Vida</label>
                <InputNumber @bind-Value="item.Vida">Ataque</InputNumber>
            </div>
        </div>

        <div style="display:flex;flex-direction:row; align-items:center; justify-content:center">
            <button class="bn54" type="submit">
                <span class="bn54span">Criar</span>
            </button>
        </div>
    </EditForm>
}

@code{
    [Inject]
    public Player? Player { get; set; }

    private ItemViewModel item { get; set; }

    private List<Habilidade> habilidades { get; set; } = new List<Habilidade>();

    [CascadingParameter]
    public IModalService Modal { get; set; }

    private List<Tipos> tipos {get; set;}

    private List<Raridades> raridades { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ListarHabilidades();
        item = new ItemViewModel();
        tipos = Enum.GetValues(typeof(Tipos)).Cast<Tipos>().ToList();
        raridades = Enum.GetValues(typeof(Raridades)).Cast<Raridades>().ToList();

        item.Raridade = (int)Raridades.Normal;
        item.Tipo = (int)Tipos.Espada;

        item.Habilidade = new Habilidade(1,"");
    }

    public static string GetDisplayName(Enum enumValue)
    {
        var enumType = enumValue.GetType();

        return enumType
                .GetMember(enumValue.ToString())
                .Where(x => x.MemberType == MemberTypes.Field && ((FieldInfo)x).FieldType == enumType)
                .First()
                .GetCustomAttribute<DisplayAttribute>()?.Name ?? enumValue.ToString();
    }

    public static int GetValue(Raridades enumValue)
    {
        return (int)enumValue;
    }
    public static int GetValue(Tipos enumValue)
    {
        return (int)enumValue;
    }

    public async void Criar()
    {
        await http.PostAsJsonAsync("api/item/Criar", item);
    }

    public async void CriarHabilidade()
    {
        var options = new ModalOptions()
                {
                    HideHeader = true
                };

        await Modal.Show<CriarHabilidade>("", options).Result;
        ResetarItem();
        ListarHabilidades();
        
    }

    public async void ListarHabilidades()
    {
        habilidades = await http.GetFromJsonAsync<List<Habilidade>>("api/item/ListarHabilidades");
        StateHasChanged();
    }

    private void ResetarItem()
    {
        item = new ItemViewModel();
        item.Habilidade = new Habilidade(1, "");
    }
}
